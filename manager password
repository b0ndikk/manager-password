using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace SimplePasswordManager
{
    class Program
    {
        // книжка для храненния паролей
        private static Dictionary<string, Tuple<string, string>> passwordVault = 
            new Dictionary<string, Tuple<string, string>>();
        
        //  шифрование хопа(АЕС А НЕ ДЕС НАДА ВОТКНУТЬ)
        private static byte[] encryptionKey = new byte[] 
        { 
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
            0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16
        };

        static void Main(string[] args)
        {
            LoadPasswords();
            // напрячь фантазию в названиях
            while (true)
            {
                Console.WriteLine("МЕНЕДЖЕР ПАРОЛЕЙ");
                Console.WriteLine("1. Все сохраненные пароли");
                Console.WriteLine("2. Найти пароль по сервису");
                Console.WriteLine("3. Добавить новый пароль");
                Console.WriteLine("4. Удалить пароль");
                Console.WriteLine("5. Выход");
                Console.Write("Выберите действие: ");
                
                var choice = Console.ReadLine();
                
                switch (choice)
                {
                    case "1":
                        ShowAllPasswords();
                        break;
                    case "2":
                        SearchPassword();
                        break;
                    case "3":
                        AddPassword();
                        break;
                    case "4":
                        RemovePassword();
                        break;
                    case "5":
                        SavePasswords();
                        return;
                    default:
                        Console.WriteLine("ОШИБКА, выберите другое действие");
                        break;
                }
            }
        }

        static void ShowAllPasswords()
        {
            if (passwordVault.Count == 0)
            {
                Console.WriteLine("Сохранённых паролей,нет");
                return;
            }

            Console.WriteLine("Сохраненные пароли:");
            foreach (var entry in passwordVault)
            {
                Console.WriteLine($"Сервис: {entry.Key}");
                Console.WriteLine($"Логин: {entry.Value.Item1}");
                Console.WriteLine($"Пароль: {Decrypt(entry.Value.Item2)}");
                Console.WriteLine("-------------------");
            }
        }
//dodelat
        static void SearchPassword()
        {
            Console.Write("Название сервиса: ");
            var service = Console.ReadLine();
            
            if (passwordVault.TryGetValue(service, out var credentials))
            {
                Console.WriteLine($"Сервис: {service}");
                Console.WriteLine($"Логин: {credentials.Item1}");
                Console.WriteLine($"Пароль: {Decrypt(credentials.Item2)}");
            }
            else
            {
                Console.WriteLine("Пароль не найден.");
            }
        }

        static void AddPassword()
        {
            Console.Write("Название сервиса: ");
            var service = Console.ReadLine();
        
            Console.Write("Логин: ");
            var username = Console.ReadLine();
            
            Console.Write("Пароль: ");
            var password = Console.ReadLine();
            
            var encryptedPassword = Encrypt(password);
            passwordVault[service] = Tuple.Create(username, encryptedPassword);
            
            Console.WriteLine("Пароль успешно добавлен!");
        }

        static void RemovePassword()
        {
            Console.Write("Название сервиса для удаления: ");
            var service = Console.ReadLine();
            
            if (passwordVault.Remove(service))
            {
                Console.WriteLine("Пароль удален.");
            }
            else
            {
                Console.WriteLine("Пароль не найден.");
            }
        }

        static void SavePasswords()
        {
            using (var writer = new StreamWriter("passwords.dat"))
            {
                foreach (var entry in passwordVault)
                {
                    writer.WriteLine($"{entry.Key}|{entry.Value.Item1}|{entry.Value.Item2}");
                }
            }
        }

        static void LoadPasswords()
        {
            if (!File.Exists("passwords.dat")) return;
            
            passwordVault.Clear();
            
            using (var reader = new StreamReader("passwords.dat"))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    var parts = line.Split('|');
                    if (parts.Length == 3)
                    {
                        passwordVault[parts[0]] = Tuple.Create(parts[1], parts[2]);
                    }
                }
            }
        }
//сука 11,23
        static string Encrypt(string plainText)
        {
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = encryptionKey;
                aesAlg.IV = new byte[16]; 

                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
                
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {
                            swEncrypt.Write(plainText);
                        }
                        return Convert.ToBase64String(msEncrypt.ToArray());
                    }
                }
            }
        }

        static string Decrypt(string cipherText)
        {
            byte[] buffer = Convert.FromBase64String(cipherText);
            
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = encryptionKey;
                aesAlg.IV = new byte[16]; 

                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                
                using (MemoryStream msDecrypt = new MemoryStream(buffer))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            return srDecrypt.ReadToEnd();
                        }
                    }
                }
            }
        }
    }
}

